
import javax.swing.JRadioButton;

/*
 * @HenryHuang
 * idealWeightCalculator.java
 * April 4, 2018
 * This program is uses to calculate the ideal weight of the users from 
 *his/her height, and also the the system of mearsure they choose.
 */

/**
 *
 * @author shhua8751
 */

 import java.text.* ;
public class FormIdealWeightCalculator extends javax.swing.JFrame {

    /**
     * Creates new form FormIdealWeightCalculator
     */
    public FormIdealWeightCalculator() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        IdealLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        nameInput = new javax.swing.JTextField();
        mearsureLabel = new javax.swing.JLabel();
        metricButton = new javax.swing.JRadioButton();
        imperialButton = new javax.swing.JRadioButton();
        heightLabel = new javax.swing.JLabel();
        heightInput = new javax.swing.JTextField();
        calculateButton = new javax.swing.JButton();
        outputLabel = new javax.swing.JLabel();
        unitLabel = new javax.swing.JLabel();
        bmiOutput = new javax.swing.JLabel();
        weightLabel = new javax.swing.JLabel();
        unitsLabel = new javax.swing.JLabel();
        weightInput = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        IdealLabel.setFont(new java.awt.Font("Tahoma", 1, 28)); // NOI18N
        IdealLabel.setForeground(new java.awt.Color(255, 0, 51));
        IdealLabel.setText("Ideal Weight Calculator");

        nameLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        nameLabel.setText("Name: ");

        nameInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameInputActionPerformed(evt);
            }
        });

        mearsureLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        mearsureLabel.setText("System of Measure :");

        metricButton.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        metricButton.setText("Metric");
        metricButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metricButtonActionPerformed(evt);
            }
        });

        imperialButton.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        imperialButton.setText("Imperial");
        imperialButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imperialButtonActionPerformed(evt);
            }
        });

        heightLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        heightLabel.setText("Height:");

        heightInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                heightInputActionPerformed(evt);
            }
        });

        calculateButton.setText("Calculate");
        calculateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateButtonActionPerformed(evt);
            }
        });

        outputLabel.setFont(new java.awt.Font("Tempus Sans ITC", 1, 18)); // NOI18N
        outputLabel.setForeground(new java.awt.Color(255, 0, 51));

        unitLabel.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        unitLabel.setText("(Metres or Inches)");

        bmiOutput.setFont(new java.awt.Font("Tempus Sans ITC", 1, 18)); // NOI18N
        bmiOutput.setForeground(new java.awt.Color(255, 0, 0));

        weightLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        weightLabel.setText("Wieght:");

        unitsLabel.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        unitsLabel.setText("(Kgs or Lbs)");

        weightInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weightInputActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon("Y:\\Documents\\bmi-chartm (1).jpg")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(IdealLabel)
                .addGap(235, 235, 235))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(heightLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(heightInput, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(calculateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(weightInput, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(173, 173, 173))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(unitsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameLabel)
                            .addComponent(mearsureLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(nameInput, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(174, 174, 174))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(imperialButton, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(metricButton, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(unitLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(weightLabel)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(bmiOutput, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 535, Short.MAX_VALUE)
                                .addComponent(outputLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel1))
                        .addGap(0, 193, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(IdealLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(nameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mearsureLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(metricButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(imperialButton)
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(heightLabel)
                    .addComponent(heightInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(unitLabel)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(weightLabel)
                    .addComponent(weightInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(unitsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(calculateButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outputLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bmiOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(381, 381, 381))
        );

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 670, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void metricButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metricButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_metricButtonActionPerformed

    private void heightInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_heightInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_heightInputActionPerformed

    private void calculateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateButtonActionPerformed
         double idealWeight;
         double height;
         double BMI;
         double weight;
         String name;
         // Listing all the variables will be use in this program.
         
         DecimalFormat x = new DecimalFormat ("###.##");
         //To round the number to only have 2 decimals places.
         
         name = nameInput.getText();
         height = Double.parseDouble(heightInput.getText());
         weight = Double.parseDouble(weightInput.getText());
         // To get the name and also the value of height the user has entered.
         
         if (metricButton.isSelected())        
         {
            idealWeight = height * height * 25;
            // This is the equation for the metric measure method.
            System.out.println(x.format(idealWeight));
            
            BMI = weight / height/ height;
            // This equation is to calculate the BMI in a metric system.
            System.out.println(x.format(BMI));
            
           if (BMI < 18)
           {
               bmiOutput.setText("Your BMI is " + x.format(BMI) +". You are underweight.");
           }
           else if ((BMI >= 18) && (BMI < 23))
           {
               bmiOutput.setText("Your BMI is " + x.format(BMI) +". You are at normal weight.");
           }
           else if ((BMI >= 23 ) && (BMI <27))
           {
               bmiOutput.setText("Your BMI is " + x.format(BMI) +". You are overweight.");
           }
           else if ((BMI >=27) && (BMI < 32))
           {
               bmiOutput.setText("Your BMI is " + x.format(BMI) +". You are obesity class 1.");
           }
           else if ((BMI >=32) && (BMI < 37))
           {
               bmiOutput.setText("Your BMI is " + x.format(BMI) +". You are obesity class 2.");
           }
           else if ((BMI >= 37))
           {
               bmiOutput.setText("Your BMI is " + x.format(BMI) +". You are OBESITY CLASS 3.");
           }
           // To identify the BMI and tell the user what about his weight status.
            outputLabel.setText(name + "'s" + " ideal weight is " + x.format(idealWeight) + " kgs.");
         }
         
         else if (imperialButton.isSelected())
         {
             idealWeight = height * height * 25 / 703;
             // This is the equation for the imperial mearsure method.
             System.out.println(x.format(idealWeight));
             
             BMI = weight / height / height * 703;
             // This equation is to calculate the BMI in a imperial system.
             System.out.println(x.format(BMI));
             
             if (BMI < 18)
           {
               bmiOutput.setText("Your BMI is " + x.format(BMI) +". You are underweight.");
           }
           else if ((BMI >= 18) && (BMI < 23))
           {
               bmiOutput.setText("Your BMI is " + x.format(BMI) +". You are at normal weight.");
           }
           else if ((BMI >= 23 ) && (BMI <27))
           {
               bmiOutput.setText("Your BMI is " + x.format(BMI) +". You are overweight.");
           }
           else if ((BMI >=27) && (BMI < 32))
           {
               bmiOutput.setText("Your BMI is " + x.format(BMI) +". You are obesity class 1.");
           }
           else if ((BMI >=32) && (BMI < 37))
           {
               bmiOutput.setText("Your BMI is " + x.format(BMI) +". You are obesity class 2.");
           }
           else if ((BMI >= 37))
           {
               bmiOutput.setText("Your BMI is " + x.format(BMI) +". You are OBESITY CLASS 3.");
           }
             // To identify the BMI and tell the user what about his weight status.
             
             outputLabel.setText(name + "'s" + " ideal weight is " + x.format(idealWeight) + " lbs.");
         }
         /* Depends on what system of measure the user has chose then sub the 
          * height value into the correct type equation , then system outprint the value
          * of weight, the output it to the user by outputLabel.(weight will be 
          * round to two decimals place
          */
    }//GEN-LAST:event_calculateButtonActionPerformed

    private void nameInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameInputActionPerformed

    private void weightInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weightInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_weightInputActionPerformed

    private void imperialButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imperialButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_imperialButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormIdealWeightCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormIdealWeightCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormIdealWeightCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormIdealWeightCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormIdealWeightCalculator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel IdealLabel;
    private javax.swing.JLabel bmiOutput;
    private javax.swing.JButton calculateButton;
    private javax.swing.JTextField heightInput;
    private javax.swing.JLabel heightLabel;
    private javax.swing.JRadioButton imperialButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel mearsureLabel;
    private javax.swing.JRadioButton metricButton;
    private javax.swing.JTextField nameInput;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel outputLabel;
    private javax.swing.JLabel unitLabel;
    private javax.swing.JLabel unitsLabel;
    private javax.swing.JTextField weightInput;
    private javax.swing.JLabel weightLabel;
    // End of variables declaration//GEN-END:variables

    private void If(JRadioButton jRadioButton) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
